3/1/14 - Today is the first day that Bucky and I have met since the beginning of the project assignment. We are currently going through user stories and figuring out a good priority/time value for each one. We have so far got the first sprint prioritized and with some guestimated time values for each feature that we wish to add. Base features (in order from first to last priority) are: Menu system, add basic audio, create a coordinate system, create a ship system (with traditional ships first), player controls, and (hopefully) after that, we should be able to throw together the base game. 

3/3/14 - Today we started our first "sprint." We wrote the main menu and the pause menu, which were pretty simple, considering we are just using STDOUT in the console for now. We wrote a main function to test the menu system with. Then we decided to get some basic sound working. Created a class called Sound and made it play basic background noise (I call it noise because it's only a small clip, not actually music). We made functions to pause and unpause all sounds. I was going to move all implementation of this class to a child class, that way we could have a class strictly for background music and another for sound effects, but I spent HOURS trying to get my source to compile on my Linux machine (Ubuntu 12.04 x64). Aparently it's a huge pain in the ass to compile source on a 64-bit machine when you're using 32-bit libraries. Finally got it working... although the sound is a bit splotchy... BUT IT WORKS. Hopefully we won't have too many more problems keeping this project cross-platform. I'm still trying to find a suitable substitute for getch(), considering that conio.h is a Windows only library. We've been considering using the NCurses library for console I/O, and supposedly it has a getch() function. We'll see.

3/4/14 - Today we started working on the base outline of our grid system, or Board class. So far we can create a board, give it a size (although it is 9x9 by default), and print it to the screen. Most of our time was spent thinking about how we wanted to structure the class, and drawing on the whiteboard. We're still trying to figure out exactly how the ships and the Board will interact, but we think that the Board will just hold Ship objects, and go from there.

3/5/14 - Today we refactored our sound class, creating two derived classes. One will be strictly for background music, and the other for our sound effects. 

3/6/14 - Spent most of today working on the class that takes care of background music. The library is proving to be a huge pain in the rear. I cannot figure out how to use non-static member variables of a class within a static function...or vise versa. It just will not let me for some reason. There is this one line of code that will not compile, and it keeps telling me that I cannot call the function without the object, even though the object should have been constructed at this point. I have no freaking idea.

3/9/14 - I had to figure out how to completely purge some files from the repository, since I accidentally added some copywrighted material (audio tracks), unaware that it would allow people to download them from GitHub. Figured out how to get my BackgroundAudio class to work properly. Changed most member variables and functions to be static, since there should only be one instance of this class called anyways. I have not yet added a check for that, but I probably should. More than one instance of this class would yield unexpected and unintentional results. I honestly have no idea what would happen. Had to change the _engine->play2D function call to set the 'track' option to true. Prior to this, it was not returning an ISound *, which is why the receiver handler was not being set.

3/10/14 - Added Ship class and implementation. Spoke with Bucky about using a friend's band's music for our demo --success!
Fixed Board class print function to display indices of rows and columns. Attempted to run on a personal Windows machine (after freshly compiling it on that system), and the process crashes at what I believe to be line 43 of the Sound.cpp file. Further investigation leads me to believe that it is quite possibly a sound driver issue.

3/11/14 - Compiled source on a separate Windows machine --same results. Crashes immediately when attempting to initialize the sound. Now I'm not quite sure what the issue is. Updated the source on linux x64 machine and ran --no problems at all. I'm completely boggled at this.

3/12/14 - Compiled and ran source on the Windows machine in the UAF Chapman lab... everything worked just fine. At this point I'm completely frustrated with the crashing issue. 
Bucky and I met at the lab and knocked out a good portion of (what probably is the hardest portion of) the logic in our program. Added the ability to place ships on the board. Haven't fully tested yet to make sure all of the logic is sound.
--Just tested, and it was horrible! Nothing was right whatsoever. Re-wrote it in a longer fashion, and now it works, but only for the first ship that is checked. We most likely just need to refactor and break things down into more functions.

3/15/14 - We figured out that the reason why it wouldn't take input for other ships had something to do with the input buffer not being cleared on our getline() function, so we switched to using cin and then a cin.ignore() afterwards. We refactored and pulled all input prompts into their own functions. We changed our Board class to hold a vector of a vector of chars instead of bools. This made it a lot easier for us to make setters/getters for manipulating what is where on the board. We added a function that allows us to attack a coordinate on the board. If it is a hit, then it fills that space with an 'X', otherwise a 'O'. We did find out that we have been indexing into our board backwards, which was mostly my fault, since I didn't think of the x-coordinates as actually being y-coordinates due to the way a vector of a vector is laid out. We fixed that issue, making the board take responsibility of all of that, so that you can still pass coordinates in the traditional way ([x,y] instead of [y,x]). We also made a typedef of std::pair<int,int> to just be Coordinate. This made our code a lot more readable.

3/17/14 - Made sure directional functions were working for our Board class. Started our Player class and made some good progress on that. We kind of haven't been practicing a whole lot of TDD (after I thought about our work), but it is really nice to have a partner to pair-program with. Tomorrow we will hopefully be working on a Game base class that ties everything together. We did have to modify our Board class' print function to take a boolean. This made it a lot easier to print a board for a player and to print the enemy board without showing the ship locations.
